// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    schemas  = ["auth", "public", "storage"]
}

model User {
  id            String    @id @default(uuid()) 
  email         String    @unique
  password      String 
  created_at    DateTime  @default(now())
  sessions      Session[]

  bases         Base[]

  @@schema("auth")      
}

// model Base {
  // id            String    @id @default(uuid()) 
  // name          String    @unique
  // workspace     String
  // userId        String
  // user          User     @relation(fields: [userId], references: [id])   
  // createdAt     DateTime @default(now())
  // updatedAt     DateTime @updatedAt

  // tables Table[]

  // @@schema("auth")
// }

model Table {
  id            String    @id @default(uuid()) 
  name          String    @unique
  baseId        String
  base          Base      @relation(fields: [baseId], references: [id])  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  numberedId    Int       @unique @default(autoincrement()) 

  rows Row[]

  @@schema("auth")
}

model Row {
  id            String    @id @default(uuid()) 
  tableId       String
  table         Table     @relation(fields: [tableId], references: [id]) 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  numberedId    Int       @unique @default(autoincrement()) 

  columns  Column[]

  @@schema("auth")
}

model Column {
  id            String    @id @default(uuid())
  fieldName     String    @unique
  columnContent String     
  rowId         String
  row           Row       @relation(fields: [rowId], references: [id]) 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  numberedId    Int       @unique @default(autoincrement()) 

  @@schema("auth")
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  expires       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@schema("auth")
}

model Base {
  id            String    @id @default(cuid())
  name          String
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@schema("auth")
}

